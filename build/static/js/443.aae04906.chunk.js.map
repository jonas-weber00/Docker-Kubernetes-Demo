{"version":3,"file":"static/js/443.aae04906.chunk.js","mappings":"kYAMO,MAAMA,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAoBE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wVAWtBC,EAAAA,EAAAA,OAAAA,IAKAA,EAAAA,EAAAA,QAAAA,IAIAA,EAAAA,EAAAA,GAAAA,IAIAA,EAAAA,EAAAA,OAAAA,KAIVC,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,EAAPN,EAAkB,MAC1CO,aAAc,OACdC,OAAQ,OACRC,SAAU,OACVC,MAAM,c,4HCvBR,MAAMC,EAAaC,EAAAA,YAAiB,SAClCC,EAGAC,GAEA,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,UAAU,KAAKH,IAAKA,KAASD,GAC7C,IAgDA,EA9CoDK,IAS7C,IAT8C,OACnDC,EAAM,UACNC,EAAS,MACTC,EAAK,YACLC,EAAW,SACXC,EAAQ,YACRC,EAAc,UAAS,WACvBC,EAAa,SAAQ,UACrBC,GACDR,EAEC,MAKMS,EAAeA,KACnBP,GAAU,EAAM,EAGlB,OACEQ,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLC,KAAMX,EACNY,oBAAqBpB,EACrBqB,QAASL,EACT,kBAAgB,uBAChB,mBAAiB,6BAA4BM,SAAA,EAE7ClB,EAAAA,EAAAA,KAACmB,EAAAA,EAAW,CAACC,GAAG,uBAAsBF,SAAEZ,KACxCN,EAAAA,EAAAA,KAACqB,EAAAA,EAAa,CAAAH,UACZlB,EAAAA,EAAAA,KAACsB,EAAAA,EAAiB,CAACF,GAAG,6BAA4BF,SAC/CX,OAGLM,EAAAA,EAAAA,MAACU,EAAAA,EAAa,CAAAL,SAAA,EACZlB,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,QAASb,EAAcjB,MAAM,UAASuB,SAC3CR,KAEHV,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,QA3BQC,KACpBrB,GAAU,GACVM,EAAUH,EAAS,EAyBiBb,MAAM,UAAUgC,WAAS,EAAAT,SACtDT,SAGE,E,2DCpDN,SAASmB,EAAWzB,GAMvB,IANwB,KAC1BY,EAAI,QACJc,GAID1B,EACC,MAAM,YAAE2B,EAAW,YAAEC,IAAgBC,EAAAA,EAAAA,MAC/B,UAAEC,IAAcC,EAAAA,EAAAA,MAChB,SAAEC,EAAQ,QAAEC,EAAO,UAAEC,EAAS,gBAAEC,IAAoBC,EAAAA,EAAAA,MAEnDC,EAAMC,GAAW5C,EAAAA,SAAe,KAChC6C,EAAWC,GAAgB9C,EAAAA,SAAe,KAC1C+C,EAAQC,GAAahD,EAAAA,SAAe,KACpCiD,EAAaC,GAAkBlD,EAAAA,SAAe,IAE/CmD,EAAcA,KAClBnB,GAAQ,EAAM,EAGVoB,EAAqBpD,EAAAA,aAAkBqD,UAE3C,MAAM1C,EAAW,IAAI2C,EAAAA,SAASf,EAASgB,EAAAA,GAAiB,CACtDC,YAAa,CAAC,0BAGhB,aAAa7C,EAAS8C,qBAAqB,CACzCC,WAAYlB,EACZmB,KAAM,CACJC,SAAUpB,EACVqB,SAAU,CACRC,KAAM,GAAInB,KAAMA,EAAMI,OAAQA,EAAQgB,KAAM,OAAQC,SAAUC,EAAKC,UAAW,OAAQC,eAAgB,UAG1G,GACD,CAAC7B,EAAUE,EAAWG,EAAMI,EAAQR,IAEjC6B,EAAmBpE,EAAAA,aAAkBqD,UACzCpB,IACA,MAAMoC,GAAYC,EAAAA,EAAAA,IAAqB,IACjCC,EAAUC,EAAAA,GACVC,QAAwBrB,EAAmBmB,GAC3CG,QAAuB,OAAPnC,QAAO,IAAPA,OAAO,EAAPA,EAASoC,qBAE/B,GADAC,QAAQC,IAAI,kBAAmBJ,EAAwB,OAAPC,QAAO,IAAPA,OAAO,EAAPA,EAASI,WACrDC,OAAON,GAAmBM,OAAc,OAAPL,QAAO,IAAPA,OAAO,EAAPA,EAASI,WAG5C,OAFA1C,EAAU,OAAO,oEAAD4C,OAAsED,OAAON,GAAiB,IAAI,GAAE,gBACpHvC,IAIFO,EAAgBc,EAAAA,GAAiB,gBAAgBF,UAC/C,IAAK4B,EAAM,OACX,MAAMC,QAAe5C,EAAS4C,SACxBC,EAAiB,CACrBC,KAAM,eACNC,OAAQ,CACNC,WAAY,eACZ3B,KAAM,CACJA,KAAM,CACJC,SAAUpB,EACVqB,SAAU,CACRC,KAAM,GAAInB,KAAMA,EAAMI,OAAQA,EAAQgB,KAAM,OAAQC,SAAUO,EAASL,UAAW,OAAQC,eAAgB,UAIhHoB,IAAK,kBACLC,QAAQ,GAADR,OAAKP,KAGhBS,EACGO,uBAAuB,CACtBC,QAAS,CAACP,GACVQ,YAAa,mCACZC,MAAK,KACN,MAAMC,EAAc,CAClBlD,OACAI,SACA+C,MAAOtD,EACP7B,SAAS,GAADqE,OAAKjC,EAAOgD,cAAa,KAAAf,OAAIzB,EAAAA,IACrCU,IAAKI,GAEP2B,EAAAA,GAAAA,KAAmB,YAAaH,GAAaD,MAAMX,IAC7CA,EAAKA,KAAKgB,UACZ7D,EAAU,UAAW,oDACrBF,IACAiB,IACF,GACA,IAEH+C,OAAOC,IAIN,MAHAvB,QAAQC,IAAIsB,GACZC,MAAM,+CACNlE,IACMiE,CAAG,GACT,GACJ,GACD,CAAC7D,EAAUE,EAAWG,EAAMI,EAAQR,IA2BvC,OACEpC,EAAAA,EAAAA,KAACH,EAAAA,SAAc,CAAAqB,UACbL,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLC,KAAMA,EACNE,QAAS+B,EACTkD,WAAS,EAAAhF,SAAA,EAETlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAW,CAAAD,SAAC,gCACbL,EAAAA,EAAAA,MAACQ,EAAAA,EAAa,CAAC8E,GAAI,CAAEC,EAAG,GAAIlF,SAAA,EAC1BlB,EAAAA,EAAAA,KAACqG,EAAAA,EAAS,CACR1E,WAAS,EACT2E,QAAS5D,EACT6D,WAAY7D,EACZ8D,OAAO,QACPpF,GAAG,aACHoB,KAAK,aACLiE,MAAM,kBACNxB,KAAK,OACLiB,WAAS,EACTQ,QAAQ,WACRC,MAAOnE,EACPoE,SAlCgBC,IACxB,MAAMF,EAAQE,EAAMC,OAAOH,MAGT,cACHI,KAAKJ,GAGlBhE,EAAa,IAFbA,EAAa,wDAIfF,EAAQkE,EAAM,KA0BR3G,EAAAA,EAAAA,KAACqG,EAAAA,EAAS,CACR1E,WAAS,EACT2E,QAASxD,EACTyD,WAAYzD,EACZ0D,OAAO,QACPpF,GAAG,SACHoB,KAAK,SACLiE,MAAM,SACNxB,KAAK,OACLiB,WAAS,EACTQ,QAAQ,WACRC,MAAO/D,EACPgE,SA5DkBC,IAC1B,MAAMF,EAAQE,EAAMC,OAAOH,MAEP,WACHI,KAAKJ,GAGpB5D,EAAe,IAFfA,EAAe,4CAIjBF,EAAU8D,EAAM,QAsDZ9F,EAAAA,EAAAA,MAACU,EAAAA,EAAa,CAAAL,SAAA,EACZlB,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,QAASuB,EAAY9B,SAAC,YAC9BlB,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACC,QAASwC,EAAiB/C,SAAC,qBAM7C,C,0BCzJA,MAAM8F,EAA6B,CACjC,CAAE5F,GAAI,OAAQqF,MAAO,OAAQQ,SAAU,KACvC,CAAE7F,GAAI,SAAUqF,MAAO,SAAUQ,SAAU,KAC3C,CAAE7F,GAAI,QAASqF,MAAO,QAASQ,SAAU,KACzC,CAAE7F,GAAI,WAAYqF,MAAO,WAAYQ,SAAU,KAC/C,CAAE7F,GAAI,SAAUqF,MAAO,UAAWQ,SAAU,GAAIC,MAAO,UAI1C,SAASC,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,OAEX,SAAElF,EAAQ,UAAEE,IAAcE,EAAAA,EAAAA,MAEzB+E,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,IAC1BG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAA6B,KACxDO,EAAcC,IAAmBR,EAAAA,EAAAA,WAAkB,IAEnDzG,EAAMc,IAAW2F,EAAAA,EAAAA,WAAS,IAC1BpH,EAAQC,IAAamH,EAAAA,EAAAA,WAAkB,IACvCS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAiB,IAW3DW,EAAkB3H,IACtB4G,EAAS,kBAADvC,OAAmBrE,GAAW,EAgDxC,OANA4H,EAAAA,EAAAA,YAAU,KAnBGlF,WACX,MAAMoE,EAAYnF,EAASkG,aAC3Bd,EAAaD,GACTA,IAAcvG,IAChBiH,GAAgB,GAChBnC,EAAAA,GAAAA,IAAkB,uBAADhB,OAAwBxC,IAAaoD,MAAM6C,IAC1D,MAAMC,EAAYD,EAAIxD,KAAK0D,OAAOC,KAAKC,IAC9B,IACFA,EACH1D,OAAQ,OAGZ8C,EAAaS,GACbP,GAAgB,EAAM,IAE1B,EAKAW,EAAM,GAEL,CAACtG,EAAWtB,KAIbF,EAAAA,EAAAA,MAAC7B,EAAS,CAAAkC,SAAA,EACNoG,IAAatH,EAAAA,EAAAA,KAAC4I,EAAAA,EAAkB,KAClC/H,EAAAA,EAAAA,MAACgI,EAAAA,GAAkB,CAAA3H,SAAA,EACjBlB,EAAAA,EAAAA,KAAC8I,EAAAA,EAAS,CAACxI,MAAO,cAClBN,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CAACkF,QAAQ,YAAYqC,UAAWzB,EAAW7F,QAlDhCuH,KACtBnH,GAAQ,EAAK,EAiDkEX,SAAC,uBAI9EL,EAAAA,EAAAA,MAACoI,EAAAA,EAAG,CAACC,UAAU,eAAeC,QAAS,OAAQC,GAAI,EAAElI,SAAA,EACnDL,EAAAA,EAAAA,MAACwI,EAAAA,EAAc,CAAClD,GAAI,CAAEmD,aAAc,OAAQ7J,OAAQ,IAAK8J,QAAS,aAAcrI,SAAA,EAC9EL,EAAAA,EAAAA,MAAC2I,EAAAA,EAAK,CAACC,cAAY,EAAC,aAAW,eAAcvI,SAAA,EAC3ClB,EAAAA,EAAAA,KAAC0J,EAAAA,EAAS,CAAAxI,UACRlB,EAAAA,EAAAA,KAAC2J,EAAAA,EAAQ,CAAAzI,SACN8F,EAAQyB,KAAKmB,IACZ5J,EAAAA,EAAAA,KAACT,EAAAA,EAAS,CAER2H,MAAO0C,EAAO1C,MACdf,GAAI,CAAEc,SAAU2C,EAAO3C,SAAUtH,MAAO,YAAaH,aAAc,kCAAmC0B,SAErG0I,EAAOnD,MAAMoD,eAJTD,EAAOxI,WASpBpB,EAAAA,EAAAA,KAAC8J,EAAAA,EAAS,CAAA5I,SACP2G,EAAUkC,OAAS,GAAKlC,EACtBmC,MAAMvC,EAAOE,EAAaF,EAAOE,EAAcA,GAC/Cc,KAAI,CAACwB,EAAKC,KAEPlK,EAAAA,EAAAA,KAAC2J,EAAAA,EAAQ,CAACQ,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAelE,GAAI,CAC5DmE,WAAY,UACZ,UAAW,CAAEC,OAAQ,UAAWC,gBAAiB,yBACjDtJ,SACC8F,EAAQyB,KAAKmB,IACZ,MAAMjD,EAAQsD,EAAIL,EAAOxI,IACzB,OACEpB,EAAAA,EAAAA,KAACV,EAAU,CAAiB4H,MAAO0C,EAAO1C,MAAOzF,QAASA,IAAoB,WAAdmI,EAAOxI,GAAkB+G,EAAe8B,EAAIzJ,UAAY,KAAKU,SAE3G,WAAd0I,EAAOxI,GACS,SAAdwI,EAAOxI,IACLP,EAAAA,EAAAA,MAACoI,EAAAA,EAAG,CAAC9C,GAAI,CAAEgD,QAAS,OAAQsB,WAAY,SAAUC,IAAK,GAAIxJ,SAAA,EACzDlB,EAAAA,EAAAA,KAACiJ,EAAAA,EAAG,CACF0B,UAAU,MACVC,IAAKX,EAAIrG,KAAI,GAAAiB,OAAMgG,EAAAA,GAAU,KAAAhG,OAAIoF,EAAIrG,MAASkH,EAAAA,GAC9CC,IAAI,iBACJ5E,GAAI,CAAE1G,OAAQ,GAAIuL,MAAO,GAAI1B,aAAc,SAE5C3C,KAEHA,GACF9F,EAAAA,EAAAA,MAACoI,EAAAA,EAAG,CAAC9C,GAAI,CAAEgD,QAAS,OAAQ8B,eAAgB,YAAa/J,SAAA,EACvDlB,EAAAA,EAAAA,KAACkL,EAAAA,EAAU,CAACvL,MAAM,OAAO,aAAW,uBAAuB8B,QAASA,IAAM0G,EAAe8B,EAAIzJ,UAAUU,UACrGlB,EAAAA,EAAAA,KAACmL,EAAAA,EAAc,OAEjBnL,EAAAA,EAAAA,KAACkL,EAAAA,EAAU,CAACvL,MAAM,QAAQ,aAAW,uBAAuB8B,QAASA,KAAM2J,OAhGrF5K,EAgGkGyJ,EAAIzJ,SA/F1HH,GAAU,QACV6H,EAAoB1H,GAFAA,KAgGgH,EAAAU,UACpGlB,EAAAA,EAAAA,KAACqL,EAAAA,EAAiB,UAnBXzB,EAAOxI,GAuBX,KA9BgC8I,UAsC5DnC,GACC/H,EAAAA,EAAAA,KAACiJ,EAAAA,EAAG,CAACqC,EAAG,EAAGC,UAAW,SAASrK,UAC7BlB,EAAAA,EAAAA,KAACwL,EAAAA,EAAgB,MAEE,IAArB3D,EAAUkC,SAAgBlJ,EAAAA,EAAAA,MAACoI,EAAAA,EAAG,CAAC9C,GAAI,CAAEoF,UAAW,SAAUnC,GAAI,IAAKlI,SAAA,EACjElB,EAAAA,EAAAA,KAACiJ,EAAAA,EAAG,CACF0B,UAAU,MACVC,IAAKa,EACLV,IAAI,iBACJ5E,GAAI,CAAEmD,aAAc,MAAO7J,OAAQ,IAAKuL,MAAO,IAAKU,GAAI,MAE1D1L,EAAAA,EAAAA,KAAC2L,EAAAA,EAAU,CAACjF,QAAQ,KAAIxF,SAAC,kCAM/BlB,EAAAA,EAAAA,KAAC4L,EAAAA,EAAe,CACdC,mBAAoB,CAAC,GAAI,GAAI,KAC7BlB,UAAU,MACVmB,MAAOjE,EAAUkC,OACjBpC,YAAaA,EACbF,KAAMA,EACNsE,aArJiBC,CAACnF,EAAgBoF,KACxCvE,EAAQuE,EAAQ,EAqJVC,oBAlJyBrF,IAC/Be,GAAgBf,EAAMC,OAAOH,OAC7Be,EAAQ,EAAE,KAkJN1H,EAAAA,EAAAA,KAACmM,EAAa,CACZ/L,OAAQA,EACRC,UAAWA,EACXC,MAAM,mBACNC,YAAW,gDACXC,SAAUyH,EACVtH,UAzIiBH,IACvBqF,EAAAA,GAAAA,KAAmB,6BAADhB,OAA8BrE,EAAQ,eAAAqE,OAAcxC,IAAaoD,MAAM6C,IACvF,MAAMC,EAAYD,EAAIxD,KAAK0D,OAAOC,KAAKC,IAC9B,IACFA,EACH1D,OAAQ,OAGZ8C,EAAaS,EAAU,GACvB,QAmIAvI,EAAAA,EAAAA,KAAC4B,EAAW,CAACb,KAAMA,EAAMc,QAASA,MAGxC,C","sources":["views/Projects/style.tsx","views/Projects/components/ConfirmDialog.tsx","views/Projects/components/CreateModal.tsx","views/Projects/index.tsx"],"sourcesContent":["import { screen } from \"env\";\r\nimport styled from \"styled-components\";\r\nimport { PaddedLayout } from \"components/layouts/PaddedLayout\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport { TableCell } from \"@mui/material\";\r\n\r\nexport const Container = styled(PaddedLayout)`\r\n\r\n  .project-list {\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n  }\r\n\r\n  button {\r\n    text-transform: none !important;\r\n  }\r\n\r\n  @media (max-width: ${screen.mobile.max}px) {\r\n    \r\n  }\r\n\r\n  // pc\r\n  @media (min-width: ${screen.monitor.min}px) {\r\n  }\r\n\r\n  // under pc\r\n  @media (max-width: ${screen.pc.max}px) {\r\n  }\r\n\r\n  // mobile\r\n  @media (max-width: ${screen.mobile.max}px) {\r\n  }\r\n`;\r\n\r\nexport const CustomCell = styled(TableCell)(() => ({\r\n  borderBottom: 'none',\r\n  height: '70px',\r\n  fontSize: '20px',\r\n  color:'#253b80'\r\n}))\r\n","import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Slide } from '@mui/material';\r\nimport { TransitionProps } from '@mui/material/transitions';\r\n\r\ninterface ConfirmDialogProps {\r\n  isOpen: boolean;\r\n  setIsOpen: (value: boolean) => void;\r\n  title: string;\r\n  description: string;\r\n  contract: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  onConfirm: (value: any) => void;\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & {\r\n    children: React.ReactElement<any, any>;\r\n  },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = ({\r\n  isOpen,\r\n  setIsOpen,\r\n  title,\r\n  description,\r\n  contract,\r\n  confirmText = 'Confirm',\r\n  cancelText = 'Cancel',\r\n  onConfirm,\r\n}) => {\r\n\r\n  const handleConfirm = () => {\r\n    setIsOpen(false);\r\n    onConfirm(contract);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={isOpen}\r\n      TransitionComponent={Transition}\r\n      onClose={handleCancel}\r\n      aria-labelledby=\"confirm-dialog-title\"\r\n      aria-describedby=\"confirm-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"confirm-dialog-title\">{title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"confirm-dialog-description\">\r\n          {description}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleCancel} color=\"primary\">\r\n          {cancelText}\r\n        </Button>\r\n        <Button onClick={handleConfirm} color=\"primary\" autoFocus>\r\n          {confirmText}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ConfirmDialog;\r\n","import * as React from 'react';\r\nimport { Button, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\n\r\nimport { ContractAddress } from 'config/contract';\r\n\r\nimport type { Action } from \"near-wallet-selector\";\r\nimport { Contract } from 'near-api-js';\r\n\r\nimport { useWalletSelector } from 'contexts/WalletSelectorContext';\r\nimport { axiosInstance, generateRandomString } from 'contexts/utils';\r\nimport { useAlert } from \"contexts/AlertContext\";\r\nimport { useSpinner } from 'contexts/GlobalSpinner';\r\nimport { IPFS_URL } from 'config/config';\r\n\r\nexport function CreateModal({\r\n  open,\r\n  setOpen,\r\n}: {\r\n  open: boolean,\r\n  setOpen: (state: boolean) => void;\r\n}) {\r\n  const { showSpinner, hideSpinner } = useSpinner();\r\n  const { showAlert } = useAlert()\r\n  const { selector, account, accountId, setWalletSignin } = useWalletSelector();\r\n\r\n  const [name, setName] = React.useState(\"\");\r\n  const [nameError, setNameError] = React.useState(\"\");\r\n  const [symbol, setSymbol] = React.useState(\"\");\r\n  const [symbolError, setSymbolError] = React.useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const getRequiredDeposit = React.useCallback(async (uri: string) => {\r\n    //@ts-ignore\r\n    const contract = new Contract(account, ContractAddress, {\r\n      viewMethods: [\"get_required_deposit\"],\r\n    });\r\n    //@ts-ignore\r\n    return await contract.get_required_deposit({\r\n      account_id: accountId,\r\n      args: {\r\n        owner_id: accountId,\r\n        metadata: {\r\n          spec: \"\", name: name, symbol: symbol, icon: \"null\", base_uri: uri, reference: \"None\", reference_hash: \"null\"\r\n        }\r\n      }\r\n    });\r\n  }, [selector, accountId, name, symbol, account]);\r\n\r\n  const CreateNewProject = React.useCallback(async () => {\r\n    showSpinner()\r\n    const randomStr = generateRandomString(30);\r\n    const baseUri = IPFS_URL;\r\n    const requiredDeposit = await getRequiredDeposit(baseUri);\r\n    const balance = await account?.getAccountBalance();\r\n    console.log('requiredDeposit', requiredDeposit, balance?.available)\r\n    if (Number(requiredDeposit) > Number(balance?.available)) {\r\n      showAlert(\"info\", `You have no enough NEAR balance to create new contract. You need ${Number(requiredDeposit)/10**24} NEAR.`);\r\n      hideSpinner()\r\n      return;\r\n    }\r\n\r\n    setWalletSignin(ContractAddress, \"create_token\", async (data) => {\r\n      if (!data) return;\r\n      const wallet = await selector.wallet();\r\n      const action: Action = {\r\n        type: \"FunctionCall\",\r\n        params: {\r\n          methodName: \"create_token\",\r\n          args: {\r\n            args: {\r\n              owner_id: accountId,\r\n              metadata: {\r\n                spec: \"\", name: name, symbol: symbol, icon: \"null\", base_uri: baseUri, reference: \"None\", reference_hash: \"null\"\r\n              }\r\n            },\r\n          },\r\n          gas: '200000000000000',\r\n          deposit: `${requiredDeposit}`,\r\n        }\r\n      };\r\n      wallet\r\n        .signAndSendTransaction({\r\n          actions: [action],\r\n          callbackUrl: \"http://localhost:2007/projects\"\r\n        }).then(() => {\r\n          const newContract = {\r\n            name,\r\n            symbol,\r\n            owner: accountId,\r\n            contract: `${symbol.toLowerCase()}.${ContractAddress}`,\r\n            uri: randomStr\r\n          }\r\n          axiosInstance.post('/contract', newContract).then((data) => {\r\n            if (data.data.success) {\r\n              showAlert('success', \"You shave created new NFT contract successfully!\")\r\n              hideSpinner()\r\n              handleClose();\r\n            }\r\n          })\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          alert(\"Failed FunctionCall create new NFT Contract\");\r\n          hideSpinner()\r\n          throw err;\r\n        });\r\n    });\r\n  }, [selector, accountId, name, symbol, account]);\r\n\r\n  const handleSymbolChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n    // Custom email validation\r\n    const symbolRegex = /^.{1,5}$/;\r\n    if (!symbolRegex.test(value)) {\r\n      setSymbolError(\"Symbol can't be longer than 5 characters\");\r\n    } else {\r\n      setSymbolError('');\r\n    }\r\n    setSymbol(value);\r\n  };\r\n\r\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n\r\n    // Custom email validation\r\n    const nameRegex = /^[a-z0-9]+$/;\r\n    if (!nameRegex.test(value)) {\r\n      setNameError('Name can only contain lowercase letters and numbers.');\r\n    } else {\r\n      setNameError('');\r\n    }\r\n    setName(value);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Let's Create Your Contract</DialogTitle>\r\n        <DialogContent sx={{ m: 4 }}>\r\n          <TextField\r\n            autoFocus\r\n            error={!!nameError}\r\n            helperText={nameError}\r\n            margin=\"dense\"\r\n            id=\"collection\"\r\n            name=\"collection\"\r\n            label=\"Collection Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={name}\r\n            onChange={handleNameChange}\r\n          />\r\n          <TextField\r\n            autoFocus\r\n            error={!!symbolError}\r\n            helperText={symbolError}\r\n            margin=\"dense\"\r\n            id=\"symbol\"\r\n            name=\"symbol\"\r\n            label=\"Symbol\"\r\n            type=\"text\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={symbol}\r\n            onChange={handleSymbolChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={CreateNewProject}>Subscribe</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { Box, Button, CircularProgress, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography } from \"@mui/material\";\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport NoDataIMG from 'assets/image/nodata.png'\r\n\r\nimport { ContractInfoType } from \"type\";\r\nimport { Container, CustomCell } from \"./style\";\r\nimport { DEF_IMAGE, SERVER_URL } from \"config/config\";\r\n\r\nimport { axiosInstance } from \"contexts/utils\";\r\nimport { useWalletSelector } from \"contexts/WalletSelectorContext\";\r\n\r\nimport PageTitle from \"components/PageTitle\";\r\nimport ConfirmDialog from \"./components/ConfirmDialog\";\r\nimport { CreateModal } from \"./components/CreateModal\";\r\nimport DisconnectedWallet from \"components/DisconnectedWallet\";\r\nimport { FlexTitleContainer } from \"components/PageTitle/style\";\r\n\r\n\r\ninterface Column {\r\n  id: 'name' | 'symbol' | 'contract' | 'owner' | 'action';\r\n  label: string;\r\n  minWidth?: number;\r\n  align?: 'right';\r\n  format?: (value: number) => string;\r\n}\r\n\r\nconst columns: readonly Column[] = [\r\n  { id: 'name', label: 'Name', minWidth: 150 },\r\n  { id: 'symbol', label: 'Symbol', minWidth: 100 },\r\n  { id: 'owner', label: 'Owner', minWidth: 170 },\r\n  { id: 'contract', label: 'Contract', minWidth: 170 },\r\n  { id: 'action', label: 'Actions', minWidth: 70, align: 'right' },\r\n];\r\n\r\n\r\nexport default function ProjectsContent() {\r\n  const navigate = useNavigate();\r\n\r\n  const { selector, accountId } = useWalletSelector();\r\n\r\n  const [connected, setConnected] = useState(false);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [tableData, setTableData] = useState<ContractInfoType[]>([])\r\n  const [tableLoading, setTableLoading] = useState<boolean>(false)\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [isOpen, setIsOpen] = useState<boolean>(false)\r\n  const [selectedContract, setSelectedContract] = useState<string>('')\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleRowClick = (contract: string) => {\r\n    navigate(`/view?contract=${contract}`)\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDelete = (contract: string) => {\r\n    setIsOpen(true);\r\n    setSelectedContract(contract)\r\n  }\r\n  const confirmedDelete = (contract: string) => {\r\n    axiosInstance.post(`/contract/delete?contract=${contract}&accountId=${accountId}`).then((res: any) => {\r\n      const tokenData = res.data.tokens.map((token: ContractInfoType) => {\r\n        return {\r\n          ...token,\r\n          action: ''\r\n        }\r\n      })\r\n      setTableData(tokenData)\r\n    })\r\n  }\r\n\r\n  const init = async () => {\r\n    const connected = selector.isSignedIn();\r\n    setConnected(connected);\r\n    if (connected && !open) {\r\n      setTableLoading(true)\r\n      axiosInstance.get(`/contract?accountId=${accountId}`).then((res: any) => {\r\n        const tokenData = res.data.tokens.map((token: ContractInfoType) => {\r\n          return {\r\n            ...token,\r\n            action: ''\r\n          }\r\n        })\r\n        setTableData(tokenData)\r\n        setTableLoading(false)\r\n      })\r\n    }\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    init();\r\n    //eslint-disable-next-line\r\n  }, [accountId, open]);\r\n\r\n\r\n  return (\r\n    <Container>\r\n      {!connected && <DisconnectedWallet />}\r\n      <FlexTitleContainer>\r\n        <PageTitle title={\"PROJECTS\"} />\r\n        <Button variant=\"contained\" disabled={!connected} onClick={handleClickOpen}>\r\n          Create Project\r\n        </Button>\r\n      </FlexTitleContainer>\r\n      <Box className=\"project-list\" display={\"flex\"} mt={2}>\r\n        <TableContainer sx={{ borderRadius: '15px', height: 700, bgcolor: '#2d2df70d' }}>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    align={column.align}\r\n                    sx={{ minWidth: column.minWidth, color: '#253b80bf', borderBottom: 'solid 1px rgb(37 59 128 / 50%)' }}\r\n                  >\r\n                    {column.label.toUpperCase()}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {tableData.length > 0 && tableData\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={index} sx={{\r\n                      background: '#f9f9fb',\r\n                      '&:hover': { cursor: 'pointer', backgroundColor: '#001dff14 !important' }\r\n                    }}>\r\n                      {columns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <CustomCell key={column.id} align={column.align} onClick={() => column.id !== 'action' ? handleRowClick(row.contract) : null} >\r\n                            {\r\n                              column.id !== 'action' ?\r\n                                column.id === 'name' ?\r\n                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                                    <Box\r\n                                      component=\"img\"\r\n                                      src={row.icon ? `${SERVER_URL}/${row.icon}` : DEF_IMAGE}\r\n                                      alt=\"Image Alt Text\"\r\n                                      sx={{ height: 30, width: 30, borderRadius: '5px' }}\r\n                                    />\r\n                                    {value}\r\n                                  </Box> :\r\n                                  value :\r\n                                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                                  <IconButton color=\"info\" aria-label=\"add to shopping cart\" onClick={() => handleRowClick(row.contract)}>\r\n                                    <VisibilityIcon />\r\n                                  </IconButton>\r\n                                  <IconButton color=\"error\" aria-label=\"add to shopping cart\" onClick={() => handleDelete(row.contract)}>\r\n                                    <DeleteOutlineIcon />\r\n                                  </IconButton>\r\n                                </Box>\r\n                            }\r\n                          </CustomCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n          {tableLoading ?\r\n            <Box p={3} textAlign={'center'}>\r\n              <CircularProgress />\r\n            </Box> :\r\n            tableData.length === 0 && <Box sx={{ textAlign: 'center', mt: 15 }}>\r\n              <Box\r\n                component=\"img\"\r\n                src={NoDataIMG}\r\n                alt=\"Image Alt Text\"\r\n                sx={{ borderRadius: \"50%\", height: 100, width: 100, mb: 5 }}\r\n              />\r\n              <Typography variant=\"h4\">\r\n                There are no Projects.\r\n              </Typography>\r\n            </Box>\r\n          }\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 25, 100]}\r\n          component=\"div\"\r\n          count={tableData.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n        <ConfirmDialog\r\n          isOpen={isOpen}\r\n          setIsOpen={setIsOpen}\r\n          title=\"Confirm Deletion\"\r\n          description={`Are you sure you want to delete this project?`}\r\n          contract={selectedContract}\r\n          onConfirm={confirmedDelete}\r\n        />\r\n      </Box>\r\n      <CreateModal open={open} setOpen={setOpen} />\r\n    </Container >\r\n  );\r\n}\r\n"],"names":["Container","styled","PaddedLayout","_templateObject","_taggedTemplateLiteral","screen","CustomCell","TableCell","borderBottom","height","fontSize","color","Transition","React","props","ref","_jsx","Slide","direction","_ref","isOpen","setIsOpen","title","description","contract","confirmText","cancelText","onConfirm","handleCancel","_jsxs","Dialog","open","TransitionComponent","onClose","children","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","handleConfirm","autoFocus","CreateModal","setOpen","showSpinner","hideSpinner","useSpinner","showAlert","useAlert","selector","account","accountId","setWalletSignin","useWalletSelector","name","setName","nameError","setNameError","symbol","setSymbol","symbolError","setSymbolError","handleClose","getRequiredDeposit","async","Contract","ContractAddress","viewMethods","get_required_deposit","account_id","args","owner_id","metadata","spec","icon","base_uri","uri","reference","reference_hash","CreateNewProject","randomStr","generateRandomString","baseUri","IPFS_URL","requiredDeposit","balance","getAccountBalance","console","log","available","Number","concat","data","wallet","action","type","params","methodName","gas","deposit","signAndSendTransaction","actions","callbackUrl","then","newContract","owner","toLowerCase","axiosInstance","success","catch","err","alert","fullWidth","sx","m","TextField","error","helperText","margin","label","variant","value","onChange","event","target","test","columns","minWidth","align","ProjectsContent","navigate","useNavigate","connected","setConnected","useState","page","setPage","rowsPerPage","setRowsPerPage","tableData","setTableData","tableLoading","setTableLoading","selectedContract","setSelectedContract","handleRowClick","useEffect","isSignedIn","res","tokenData","tokens","map","token","init","DisconnectedWallet","FlexTitleContainer","PageTitle","disabled","handleClickOpen","Box","className","display","mt","TableContainer","borderRadius","bgcolor","Table","stickyHeader","TableHead","TableRow","column","toUpperCase","TableBody","length","slice","row","index","hover","role","tabIndex","background","cursor","backgroundColor","alignItems","gap","component","src","SERVER_URL","DEF_IMAGE","alt","width","justifyContent","IconButton","VisibilityIcon","handleDelete","DeleteOutlineIcon","p","textAlign","CircularProgress","NoDataIMG","mb","Typography","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","ConfirmDialog"],"sourceRoot":""}