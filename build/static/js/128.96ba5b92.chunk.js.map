{"version":3,"file":"static/js/128.96ba5b92.chunk.js","mappings":"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","sources":["components/DisconnectedWallet.tsx","components/layouts/PaddedLayout.tsx","contexts/utils.tsx","env.ts","views/NewNFT/style.tsx","views/NewNFT/index.tsx"],"sourcesContent":["const DisconnectedWallet = () => {\r\n    return (\r\n        <div style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\r\n            <h4 style={{ color: '#253b80', letterSpacing: '2px' }}>\r\n                Please connect your wallet!\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\nexport default DisconnectedWallet","// import { Footer } from \"components/Footer\";\r\nimport { BODY_MARGIN_TOP, screen } from \"env\";\r\nimport React, { ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport interface PaddedLayoutProps {\r\n    className?: string;\r\n    children: ReactNode;\r\n}\r\n\r\nfunction PaddedLayoutBase({ className, children }: PaddedLayoutProps) {\r\n    return (\r\n        <div className={className}>\r\n            <div\r\n                className=\"content-layout\"\r\n                style={{ maxWidth: \"1420px\", margin: \"auto\" }}\r\n            >\r\n                {children}\r\n                {/* <Footer style={{ margin: \"60px 0\" }} /> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const PaddedLayout = styled(PaddedLayoutBase)`\r\n    // ---------------------------------------------\r\n    // style\r\n    // ---------------------------------------------\r\n    background-color: ${({ theme }) => theme.backgroundColor};\r\n    color: ${({ theme }) => theme.textColor};\r\n\r\n    // ---------------------------------------------\r\n    // layout\r\n    // ---------------------------------------------\r\n    // pc\r\n    @media (min-width: ${screen.pc.min}px) {\r\n        padding: ${BODY_MARGIN_TOP.pc}px;\r\n\r\n        .NeuSection-root {\r\n            margin-bottom: 40px;\r\n        }\r\n    }\r\n\r\n    @media (min-width: ${screen.monitor.min}px) {\r\n        main {\r\n            max-width: ${screen.monitor.min}px;\r\n            margin: 0 auto;\r\n        }\r\n    }\r\n\r\n    // tablet\r\n    @media (min-width: ${screen.tablet.min}px) and (max-width: ${screen.tablet.max}px) {\r\n        padding: ${BODY_MARGIN_TOP.tablet}px 30px 30px 30px;\r\n\r\n        .NeuSection-root {\r\n            margin-bottom: 40px;\r\n\r\n            .NeuSection-content {\r\n                padding: 30px;\r\n            }\r\n        }\r\n    }\r\n\r\n    // mobile\r\n    @media (max-width: ${screen.mobile.max}px) {\r\n        padding: ${BODY_MARGIN_TOP.mobile}px 15px 15px 15px;\r\n\r\n        .NeuSection-root {\r\n            margin-bottom: 40px;\r\n\r\n            .NeuSection-content {\r\n                padding: 20px;\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import axios from \"axios\";\r\nimport { SERVER_URL } from \"config/config\";\r\nimport { ReferenceObject } from \"type\";\r\n\r\nexport const MAX_UPLOAD_BYTES = 31457280;\r\nexport const OBJECT_IS_EMPTY_ERROR = \"Provided object is empty\";\r\nexport const ARWEAVE_SERVICE_HOST = \"https://ar.mintbase.xyz\";\r\n\r\nexport const makeRankString = (rank: number) => {\r\n  const randomNumString: string = String(Math.random()).split(\".\")[1];\r\n  let firstText = randomNumString.slice(0, 7);\r\n  const text = firstText.concat(String(rank));\r\n  return text;\r\n};\r\n\r\nexport const axiosInstance = axios.create({\r\n  baseURL: `${SERVER_URL}/api`, // Set your base URL\r\n  timeout: 30000, // Set a timeout (optional)\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    // Add any other headers you need\r\n  },\r\n});\r\n\r\nexport const uploadReference = async (referenceObject: ReferenceObject) => {\r\n  if (Object.keys(referenceObject).length === 0) {\r\n    throw new Error(OBJECT_IS_EMPTY_ERROR);\r\n  }\r\n  const formData = getFormDataFromJson(referenceObject);\r\n  try {\r\n    const request = await fetch(`${ARWEAVE_SERVICE_HOST}/reference`, {\r\n      method: 'POST',\r\n      //@ts-ignore\r\n      headers: {\r\n        'mb-api-key': \"anon\",\r\n      },\r\n      body: formData,\r\n      redirect: 'follow',\r\n    });\r\n    if (request.status !== 200) {\r\n      throw new Error(`Error uploading via arweave service: ${JSON.stringify(await request.json())}`);\r\n    }\r\n    const result = (await request.json());\r\n    return Object.assign(Object.assign({}, result), { media_url: `https://arweave.net/${result.media_hash}` });\r\n  }\r\n  catch (error) {\r\n    console.error('Uploading file to arweave failed');\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const getFormDataFromJson = (referenceObject: ReferenceObject) => {\r\n  const formData = new FormData();\r\n  Object.entries(referenceObject).forEach((entry) => {\r\n    const [key, value] = entry;\r\n    const hasCorrectMediaType = (key === 'document' || key === 'media' || key === 'animation_url');\r\n    const notMedia = !hasCorrectMediaType && !(value instanceof File);\r\n    const canBeUploaded = value instanceof File && value.size < MAX_UPLOAD_BYTES;\r\n    const invalidFile = !hasCorrectMediaType && (value instanceof File);\r\n    const mediaTypeWithoutFile = hasCorrectMediaType && (typeof (value) === 'string');\r\n    if (invalidFile) {\r\n      // example title: File\r\n      throw new Error('The provided field has a key that is not recognized by our service and will not be uploaded to arweave, try using media, animation_url or document');\r\n    }\r\n    if (mediaTypeWithoutFile) {\r\n      // example: media: \"\"  -> upload anyways\r\n      console.warn('The provided media type will not be uploaded because its a string and not a file, try attaching files to the following keys: media, animation_url or document');\r\n      //@ts-ignore\r\n      formData.append(key, value);\r\n    }\r\n    if (notMedia && typeof (value) === 'string') {\r\n      //fields\r\n      //@ts-ignore\r\n      formData.append(key, value);\r\n    }\r\n    else if (canBeUploaded) {\r\n      //media\r\n      //@ts-ignore\r\n      formData.append(key, value);\r\n    }\r\n  });\r\n  return formData;\r\n}\r\n\r\nexport const getActivityTime = (time: string) => {\r\n  const date = new Date(Number(time));\r\n\r\n  // Format the date and time components\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n  const seconds = String(date.getSeconds()).padStart(2, '0');\r\n\r\n  // Create a new formatted date string\r\n  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n\r\n  return formattedDateTime;\r\n}\r\n\r\nexport const generateRandomString = (length: number) => {\r\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  let result = '';\r\n  const charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n","export const screen = {\r\n\tmobile: { max: 530 },\r\n\t// mobile : @media (max-width: ${screen.mobile.max}px)\r\n\ttablet: { min: 531, max: 830 },\r\n\t// tablet : @media (min-width: ${screen.tablet.min}px) and (max-width: ${screen.tablet.max}px)\r\n\tpc: { min: 831, max: 1439 },\r\n\t// pc : @media (min-width: ${screen.pc.min}px)\r\n\tmonitor: { min: 1440 },\r\n\t// monitor : @media (min-width: ${screen.pc.min}px) and (max-width: ${screen.pc.max}px)\r\n\t// huge monitor : @media (min-width: ${screen.monitor.min}px)\r\n} as const;\r\n\r\nexport const BODY_MARGIN_TOP = {\r\n\tpc: 50,\r\n\tmobile: 20,\r\n\ttablet: 20,\r\n};","import { screen } from \"env\";\r\nimport styled from \"styled-components\";\r\nimport { PaddedLayout } from \"components/layouts/PaddedLayout\";\r\nimport { FormControlLabel } from \"@mui/material\";\r\n\r\nexport const Container = styled(PaddedLayout)`\r\n\r\n  .whiteBlock {\r\n    background: #f5f5f5;\r\n    border-radius: 15px;\r\n    padding: 15px;\r\n    position:relative;\r\n    transition: background-color 0.2s ease-in-out; \r\n    h6{\r\n      color:#ababab;\r\n    },\r\n    h4{\r\n        font-weight: 800;\r\n        font-size: 2.325rem;\r\n    }\r\n    .NFTs-link {\r\n      position: absolute;\r\n      width: 18px;\r\n      right: 10px;\r\n      top: 10px;\r\n      color: #b5b5b5;\r\n    }\r\n  }\r\n\r\n  .fileBox {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 20px;\r\n    background: darkgrey;\r\n    padding: 40px;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .uploadBox {\r\n    width: 100%;\r\n    height:auto;\r\n    border-radius:5px;\r\n    padding: 20px;\r\n    cursor:pointer;\r\n    text-align: center;\r\n    background-color: #ebedef;\r\n    transition: background-color 0.2s ease-in-out;\r\n  }\r\n\r\n  .uploadBox:hover {\r\n    background-color: #dddedf;\r\n    transition: background-color 0.2s ease-in-out;\r\n  }\r\n  \r\n  button {\r\n    text-transform: none !important;\r\n  }\r\n\r\n  @media (max-width: ${screen.mobile.max}px) {\r\n    \r\n  }\r\n\r\n  // pc\r\n  @media (min-width: ${screen.monitor.min}px) {\r\n  }\r\n\r\n  // under pc\r\n  @media (max-width: ${screen.pc.max}px) {\r\n  }\r\n\r\n  // mobile\r\n  @media (max-width: ${screen.mobile.max}px) {\r\n    .basic-box {\r\n      flex-direction: column;\r\n    }\r\n    .documentName {\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n    }\r\n  \r\n  }\r\n`;\r\n\r\nexport const ColorPicker = styled(`input`)(() => ({\r\n  borderBottom: 'none',\r\n  width: \"35px\",\r\n  height: \"35px\",\r\n  fontSize: '20px',\r\n  overflow: 'hidden',\r\n  padding: 0,\r\n  border: 'none',\r\n  margin: 0,\r\n}))\r\n\r\nexport const CustomFormControlLabel = styled(FormControlLabel)(() => ({\r\n  background: 'white',\r\n  paddingRight: '10px',\r\n  borderRadius: 10,\r\n  transition: 'background-color 0.2s ease-in-out',\r\n  '&:hover': {\r\n    background: '#32c5ff47',\r\n    transition: 'background-color 0.2s ease-in-out'\r\n  }\r\n}))\r\n","import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { Box, Button, Grid, Typography, IconButton, Stack, Accordion, AccordionSummary, AccordionDetails, TextField, FormGroup, Skeleton } from \"@mui/material\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport FileUploadOutlinedIcon from '@mui/icons-material/FileUploadOutlined';\r\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\r\n\r\nimport { Action } from \"near-wallet-selector\";\r\nimport { utils } from \"near-api-js\";\r\n\r\nimport { ColorPicker, Container, CustomFormControlLabel } from \"./style\";\r\n\r\nimport { useWalletSelector } from \"contexts/WalletSelectorContext\";\r\nimport { axiosInstance, generateRandomString, uploadReference } from \"contexts/utils\";\r\nimport { useAlert } from \"contexts/AlertContext\";\r\nimport { useSpinner } from \"contexts/GlobalSpinner\";\r\n\r\nimport { IPFS_URL } from \"config/config\";\r\nimport { Traits, AddedTraits, ContractInfoType, ReferenceObject } from \"type\";\r\n\r\nimport DisconnectedWallet from \"components/DisconnectedWallet\";\r\n\r\n\r\nexport default function NewNFT() {\r\n  const { showSpinner, hideSpinner } = useSpinner();\r\n  const navigate = useNavigate();\r\n  const { showAlert } = useAlert()\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const tokenContract = urlParams.get('contract');\r\n\r\n\r\n  const { selector, account, accountId, setWalletSignin } = useWalletSelector();\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  const [isMinting, setIsMinting] = useState<boolean>(false)\r\n  const [nftName, setNftName] = useState('')\r\n  const [nftPrice, setNftPrice] = useState('0')\r\n  const [description, setDescription] = useState('')\r\n  const [backgroundColor, setBackgroundColor] = useState('')\r\n  const [externalURL, setExternalURL] = useState('')\r\n  const [tokenId, setTokenId] = useState<string>('');\r\n\r\n  const [tokenData, setTokenData] = useState<ContractInfoType>();\r\n  const [traits, setTraits] = useState<Traits[]>([])\r\n  const [addedTraits, setAddedTraits] = useState<AddedTraits[]>([])\r\n\r\n  const [selectedImage, setSelectedImage] = useState<File | null>();\r\n  const [selectedDocument, setSelectedDocument] = useState<File | null>();\r\n  const [preview, setPreview] = useState<string | null>(null);\r\n\r\n\r\n  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { files } = event.target;\r\n    const selectedFiles = files as FileList;\r\n\r\n    if (selectedFiles && selectedFiles.length > 0) {\r\n      const file = selectedFiles[0];\r\n\r\n      // Check if the file is an image\r\n      if (file.type.startsWith('image/')) {\r\n        setSelectedImage(file);\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          setPreview(reader.result as string | null);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      } else {\r\n        // File is not an image\r\n        showAlert('warning', 'Please select an image file.');\r\n        // Clear the file input\r\n        event.target.value = '';\r\n        setSelectedImage(null);\r\n        setPreview(null);\r\n      }\r\n    } else {\r\n      setSelectedImage(null);\r\n      setPreview(null);\r\n    }\r\n  };\r\n\r\n  const handleDocumentChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { files } = event.target;\r\n    const selectedFiles = files as FileList;\r\n\r\n    if (selectedFiles && selectedFiles.length > 0) {\r\n      const file = selectedFiles[0];\r\n\r\n      // Check if the file is a PDF\r\n      if (file.type === 'application/pdf') {\r\n        setSelectedDocument(file);\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n      } else {\r\n        // File is not a PDF\r\n        showAlert('warning', 'Please select a PDF file.');\r\n        // Clear the file input\r\n        event.target.value = '';\r\n        setSelectedDocument(null);\r\n      }\r\n    } else {\r\n      setSelectedDocument(null);\r\n    }\r\n  };\r\n\r\n  const mintNFT = async () => {\r\n    if (!selectedImage || !nftName) {\r\n      showAlert(\"info\", \"Please enter all required information.\");\r\n      return;\r\n    }\r\n\r\n    const balance = await account?.getAccountBalance();\r\n    if (0 >= Number(balance?.available)) {\r\n      showAlert(\"info\", \"You have no enough NEAR balance.\");\r\n      return;\r\n    }\r\n\r\n    showSpinner()\r\n    setIsMinting(true)\r\n\r\n    try {\r\n      // const imageData = new FormData();\r\n      // imageData.append('file', selectedImage);\r\n\r\n      // const imageRes = await axiosInstance.post(`/nfts/asset_upload?uri=${tokenData?.uri}&isFile=true&index=${tokenId}`, imageData, {\r\n      //   headers: {\r\n      //     'Content-Type': 'multipart/form-data',\r\n      //   },\r\n      // });\r\n\r\n      // let documentRes: any = null;\r\n      // if (selectedDocument) {\r\n      //   const documentData = new FormData();\r\n      //   documentData.append('file', selectedDocument);\r\n      //   documentRes = await axiosInstance.post(`/nfts/asset_upload?uri=${tokenData?.uri}&isFile=true&index=${tokenId}`, documentData, {\r\n      //     headers: {\r\n      //       'Content-Type': 'multipart/form-data',\r\n      //     },\r\n      //   });\r\n      // }\r\n\r\n      // if (imageRes.data) {\r\n      //   const imagePath: string = `${SERVER_URL}/${imageRes.data.filePath.replaceAll(\"\\\\\", '/')}`\r\n      //   const documentPath: string = documentRes && `${SERVER_URL}/${documentRes?.data?.filePath.replaceAll(\"\\\\\", '/')}`\r\n\r\n      // const jsonData = {\r\n      //   title: nftName,\r\n      //   description: description,\r\n      //   media: imagePath,\r\n      //   animation_url: \"\",\r\n      //   document: documentRes ? documentPath : \"\",\r\n      //   external_url: externalURL,\r\n      //   background_color: backgroundColor,\r\n      //   attributes: addedTraits\r\n\r\n      // }\r\n      let metadata: ReferenceObject = {\r\n        title: nftName,\r\n        description: description,\r\n        media: selectedImage,\r\n        animation_url: \"\",\r\n        external_url: externalURL,\r\n        background_color: backgroundColor,\r\n        attributes: JSON.stringify(addedTraits)\r\n      }\r\n\r\n      if (selectedDocument) metadata.document = selectedDocument\r\n      const uploadResult = await uploadReference(metadata);\r\n\r\n\r\n      const mediaPath = IPFS_URL + uploadResult.media_hash;\r\n      // const ipfsData = await axios.get(IPFS_URL + uploadResult.id as string);\r\n      // if (ipfsData) {\r\n      //   mediaPath = ipfsData.data.media\r\n      // }\r\n\r\n      // const jsonRes = await axiosInstance.post(`/nfts/asset_upload?uri=${tokenData?.uri}&isFile=false&index=${tokenId}`, { jsonData });\r\n      // const reference = jsonRes.data.filePath.slice(-15)\r\n\r\n      setWalletSignin(tokenContract as string, \"store_metadata\", async (data) => {\r\n        if (!data) return;\r\n        const wallet = await selector.wallet();\r\n        const priceInYoctoNEAR = utils.format.parseNearAmount(nftPrice.toString());\r\n\r\n        let actionArg = {\r\n          token_id: tokenId,\r\n          title: nftName,\r\n          description: description,\r\n          media: mediaPath,\r\n          reference: IPFS_URL + uploadResult.id,\r\n          reference_hash: \"null\",\r\n          price: priceInYoctoNEAR\r\n        }\r\n\r\n        const action: Action = {\r\n          type: \"FunctionCall\",\r\n          params: {\r\n            methodName: \"store_metadata\",\r\n            args: actionArg,\r\n            gas: '200000000000000',\r\n            deposit: ``,\r\n          },\r\n        };\r\n        wallet\r\n          .signAndSendTransaction({\r\n            actions: [action],\r\n          }).then(() => {\r\n            const newNFT = {\r\n              accountId,\r\n              contract: tokenContract,\r\n              index: 0,\r\n              nftData: { ...actionArg }\r\n            }\r\n            axiosInstance.post('/nfts', newNFT).then((data) => {\r\n              if (data.data.success) {\r\n                gotoView();\r\n                showAlert('success', \"You shave created new NFT successfully!\")\r\n                setIsMinting(true)\r\n                hideSpinner()\r\n              }\r\n            })\r\n          })\r\n          .catch((err) => {\r\n            console.log(err)\r\n            showAlert(\"error\", \"Failed FunctionCall create new NFT\");\r\n            setIsMinting(true)\r\n            hideSpinner()\r\n            throw err;\r\n          });\r\n      });\r\n      // }\r\n    } catch (error) {\r\n      console.error(error);\r\n      showAlert(\"error\", String(error))\r\n      hideSpinner()\r\n      setIsMinting(false)\r\n    }\r\n  }\r\n\r\n  const handleRemoveImage = () => {\r\n    setSelectedImage(null);\r\n    setPreview(null);\r\n  };\r\n\r\n  const handleRemoveDocument = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    // Your existing code to remove the document\r\n    setSelectedDocument(null);\r\n    // Any other cleanup you need to do\r\n  };\r\n\r\n\r\n\r\n  const gotoView = () => {\r\n    navigate(`/view?contract=${tokenContract}`)\r\n  }\r\n\r\n  const handleColorChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let value = e.target.value;\r\n    const isValidColor = /^#[0-9A-F]{6}$/i.test(value);\r\n    if (isValidColor) {\r\n      setBackgroundColor(value);\r\n    } else {\r\n      showAlert('warning', 'Invalid color format');\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>, key: string) => {\r\n    let value = e.target.value\r\n    switch (key) {\r\n      case 'name':\r\n        setNftName(value)\r\n        break;\r\n      case 'price':\r\n        setNftPrice(value)\r\n        break;\r\n      case 'des':\r\n        setDescription(value)\r\n        break;\r\n      case 'url':\r\n        if (!value.startsWith('http://') && !value.startsWith('https://')) {\r\n          value = 'https://' + value;\r\n        }\r\n        setExternalURL(value)\r\n\r\n    }\r\n  }\r\n\r\n  const handleTraitsChange = (e: any, category: string, value: string) => {\r\n    const isCheck = e.target.checked;\r\n    if (isCheck) {\r\n      setAddedTraits((prevTraits) => [...prevTraits, { trait_type: category, value }]);\r\n    } else {\r\n      setAddedTraits((prevTraits) =>\r\n        prevTraits.filter((trait) => trait.trait_type !== category || trait.value !== value)\r\n      );\r\n\r\n    }\r\n  }\r\n  const init = async () => {\r\n    const connected = selector.isSignedIn();\r\n    setConnected(connected);\r\n    if (connected) {\r\n      showSpinner()\r\n      setTokenId(generateRandomString(10))\r\n      axiosInstance.get(`/contract/get_token_by_contract?contract=${tokenContract}`).then(({ data }) => {\r\n        setTokenData(data.token)\r\n        hideSpinner()\r\n      }).catch((err) => hideSpinner())\r\n      axiosInstance.get(`/traits?contract=${tokenContract}`).then(({ data }) => {\r\n        if (data.data)\r\n          setTraits(JSON.parse(data.data.traits))\r\n        else setTraits([])\r\n      })\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    init();\r\n    //eslint-disable-next-line\r\n  }, [accountId]);\r\n\r\n\r\n  return (\r\n    <Container >\r\n      {!connected && <DisconnectedWallet />}\r\n      {!connected &&\r\n        <Grid container spacing={2} sx={{ maxWidth: '900px', margin: 'auto' }}>\r\n          <Grid item xs={12}>\r\n            <Skeleton variant=\"text\" />\r\n          </Grid>\r\n          <Grid item md={3} sm={4} xs={6}>\r\n            <Skeleton height={200} />\r\n          </Grid>\r\n          <Grid item md={9} sm={8} xs={12} container >\r\n            <Grid item xs={12}>\r\n              <Skeleton height={30} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Skeleton height={80} />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sx={{ mt: 5 }}>\r\n            <Skeleton variant=\"text\" />\r\n          </Grid>\r\n          <Grid item md={3} sm={4} xs={6}>\r\n            <Skeleton height={200} />\r\n          </Grid>\r\n          <Grid item md={9} sm={8} xs={12} container >\r\n            <Grid item xs={12}>\r\n              <Skeleton height={30} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Skeleton height={80} />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      }\r\n      {connected && (\r\n        <Grid sx={{ maxWidth: '900px', margin: 'auto' }}>\r\n          <Box sx={{ mb: 4, textAlign: 'center', position: 'relative' }}  >\r\n            <IconButton onClick={gotoView} sx={{ position: 'absolute', right: '0px', top: '-20px' }}>\r\n              <CloseIcon sx={{ width: '18px', height: '18px' }} />\r\n            </IconButton>\r\n            <Typography variant=\"subtitle2\">\r\n              {`Contract (${tokenData?.name ?? \"Your contract\"})`}\r\n            </Typography>\r\n            <Typography variant=\"h5\" className=\"subtitle\">\r\n              Create NFT\r\n            </Typography>\r\n          </Box>\r\n\r\n\r\n          <Accordion defaultExpanded>\r\n            <AccordionSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1-content\"\r\n              id=\"panel1-header\"\r\n            >\r\n              <Typography variant=\"h5\">Basic Information</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Stack gap={4} sx={{ flexDirection: { sm: 'row', xs: 'column' } }}>\r\n                <Box>\r\n                  <Box component='label' htmlFor=\"file-input\">\r\n                    <Box\r\n                      component='input'\r\n                      id=\"file-input\"\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      style={{ display: 'none' }}\r\n                      onChange={handleImageChange}\r\n                    />\r\n                    <Box\r\n                      border={1}\r\n                      borderColor=\"grey.400\"\r\n                      borderRadius={2}\r\n                      display=\"flex\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\"\r\n                      width={150}\r\n                      height={190}\r\n                      bgcolor={preview ? 'transparent' : 'white'}\r\n                      sx={{\r\n                        margin: { sm: 'none', xs: 'auto' },\r\n                        overflow: 'hidden',\r\n                        transition: 'background-color 0.2s ease-in-out',\r\n                        '&:hover': {\r\n                          cursor: 'pointer',\r\n                          borderColor: '#253b80',\r\n                          background: '#adb9df !important',\r\n                          transition: 'background-color 0.2s ease-in-out',\r\n                          '.image-part': {\r\n                            color: '#253b80'\r\n                          }\r\n                        },\r\n                      }}\r\n                    >\r\n                      {preview ? (\r\n                        <img src={preview} alt=\"Preview\" style={{ width: 150, height: 190 }} />\r\n                      ) : (\r\n                        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'relative' }}>\r\n                          <FileUploadOutlinedIcon className=\"image-part\" sx={{ width: 40, height: 40, color: '#253b80' }} />\r\n                          <Typography className=\"image-part body_font\" variant=\"body1\" color=\"textSecondary\" sx={{ fontWeight: 700 }}>\r\n                            Upload Image\r\n                          </Typography>\r\n                          <Typography className=\"image-part body_font\" variant=\"caption\" color=\"textSecondary\" sx={{ position: 'absolute', bottom: '-70%' }}>\r\n                            Max size is 10M\r\n                          </Typography>\r\n                        </Box>\r\n                      )}\r\n                    </Box>\r\n                  </Box>\r\n                  {selectedImage &&\r\n                    <IconButton color=\"error\" aria-label=\"add to shopping cart\" onClick={handleRemoveImage}>\r\n                      <DeleteOutlineIcon />\r\n                    </IconButton>\r\n                  }\r\n                </Box>\r\n                <Box sx={{ width: '100%', display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                  <Box display={'flex'} gap={1} className=\"basic-box\">\r\n                    <TextField\r\n                      size=\"small\"\r\n                      id=\"outlined-basic\"\r\n                      label=\"NFT Name\"\r\n                      variant=\"outlined\"\r\n                      placeholder=\"NFT Name\"\r\n                      helperText=\"Required\"\r\n                      fullWidth\r\n                      value={nftName}\r\n                      onChange={(e: ChangeEvent<HTMLInputElement>) => handleInputChange(e, 'name')}\r\n                    />\r\n                    <TextField\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      id=\"outlined-basic\"\r\n                      label=\"NFT Price (NEAR)\"\r\n                      variant=\"outlined\"\r\n                      placeholder=\"ex; 1 (NEAR)\"\r\n                      value={nftPrice}\r\n                      onChange={(e: ChangeEvent<HTMLInputElement>) => handleInputChange(e, 'price')}\r\n                    />\r\n                  </Box>\r\n                  <TextField\r\n                    id=\"outlined-multiline-static\"\r\n                    label=\"Description\"\r\n                    multiline\r\n                    rows={4}\r\n                    size=\"small\"\r\n                    value={description}\r\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => handleInputChange(e, 'des')}\r\n                  />\r\n                </Box>\r\n              </Stack>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Accordion defaultExpanded>\r\n            <AccordionSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1-content\"\r\n              id=\"panel1-header\"\r\n            >\r\n              <Typography variant=\"h5\">Document</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Stack direction={'column'} gap={4}>\r\n                {selectedDocument && <Box className=\"fileBox\">\r\n                  <InsertDriveFileIcon sx={{ width: 50, height: 50, color: '#253b80' }} />\r\n                  <Typography className=\"documentName\">{selectedDocument?.name}</Typography>\r\n                </Box>}\r\n                <Box component={'label'} htmlFor=\"image-input\" className=\"uploadBox\">\r\n                  <Box\r\n                    component='input'\r\n                    id=\"image-input\"\r\n                    type=\"file\"\r\n                    accept=\".pdf,application/pdf\"\r\n                    style={{ display: 'none' }}\r\n                    onChange={handleDocumentChange}\r\n                  />\r\n                  <Typography>Upload File</Typography>\r\n                  <Typography sx={{ color: '#1d26a1', mb: '25px', fontSize: '14px' }}>(or just drop your file here)</Typography>\r\n                  {selectedDocument && (\r\n                    <Button\r\n                      size=\"small\"\r\n                      variant=\"contained\"\r\n                      color=\"error\"\r\n                      onClick={(e) => handleRemoveDocument(e)}\r\n                    >\r\n                      Remove Document\r\n                    </Button>\r\n                  )}\r\n                </Box>\r\n              </Stack>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Accordion defaultExpanded>\r\n            <AccordionSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel2-content\"\r\n              id=\"panel2-header\"\r\n            >\r\n              <Typography variant=\"h5\">Traits</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Grid container spacing={2}>\r\n                {traits.length > 0 ? traits.map((trait, index) => {\r\n                  return <Grid item xs={6} key={index}>\r\n                    <Box className=\"whiteBlock\">\r\n                      <Typography variant=\"h5\">\r\n                        {trait.category}\r\n                      </Typography>\r\n                      <FormGroup sx={{ flexDirection: 'row', p: 2, gap: 1 }}>\r\n                        {trait.values.map((value, index) => {\r\n                          return <CustomFormControlLabel\r\n                            key={index}\r\n                            control={\r\n                              <Checkbox onChange={(e) => handleTraitsChange(e, trait.category, value)} />\r\n                            }\r\n                            label={value}\r\n                          />\r\n                        })}\r\n                      </FormGroup>\r\n                    </Box>\r\n                  </Grid>\r\n                }) :\r\n                  <Grid item xs={12}>\r\n                    <Typography className=\"body_font\" my={2} textAlign={'center'} variant=\"h6\">No Traits Added</Typography>\r\n                  </Grid>\r\n                }\r\n              </Grid>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Accordion defaultExpanded>\r\n            <AccordionSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel2-content\"\r\n              id=\"panel2-header\"\r\n            >\r\n              <Typography variant=\"h5\">Optional Settings</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={6} sx={{ position: 'relative' }}>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    label=\"Background Color\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"#000000\"\r\n                    fullWidth\r\n                    helperText={`Must be a six-character hexadecimal with a pre-pended #.`}\r\n                    value={backgroundColor}\r\n                    onChange={handleColorChange}\r\n                  />\r\n                  <Box\r\n                    sx={{\r\n                      display: 'block',\r\n                      borderRadius: 50,\r\n                      width: 30,\r\n                      height: 30,\r\n                      position: 'absolute',\r\n                      top: '18px',\r\n                      right: '10px'\r\n                    }} >\r\n                    <ColorPicker value={backgroundColor} type=\"color\" onChange={handleColorChange} />\r\n                  </Box>\r\n                  {/* <Box component=\"input\" hidden type=\"color\" id=\"color-picker\" /> */}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    size=\"small\"\r\n                    label=\"External URL\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"External URL\"\r\n                    fullWidth\r\n                    helperText={`This is the URL that will allow users to view the item on your site.`}\r\n                    value={externalURL}\r\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => handleInputChange(e, 'url')}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Box sx={{ mt: 3, mb: 1, textAlign: 'center' }}>\r\n            <Button variant=\"contained\" sx={{ height: '50px', width: '180px' }} onClick={mintNFT}>\r\n              {isMinting ? \"Making type ....\" : \"Make New NFT Type\"}\r\n            </Button>\r\n          </Box>\r\n        </Grid >\r\n      )\r\n      }\r\n\r\n    </Container >\r\n  );\r\n}\r\n"],"names":["DisconnectedWallet","_jsx","style","textAlign","marginBottom","children","color","letterSpacing","PaddedLayout","styled","_ref","className","maxWidth","margin","_templateObject","_taggedTemplateLiteral","_ref2","theme","backgroundColor","_ref3","textColor","screen","BODY_MARGIN_TOP","axiosInstance","axios","baseURL","concat","SERVER_URL","timeout","headers","uploadReference","async","Object","keys","referenceObject","length","Error","formData","getFormDataFromJson","request","fetch","method","body","redirect","status","JSON","stringify","json","result","assign","media_url","media_hash","error","console","FormData","entries","forEach","entry","key","value","hasCorrectMediaType","notMedia","File","canBeUploaded","size","mediaTypeWithoutFile","warn","append","getActivityTime","time","date","Date","Number","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","generateRandomString","characters","i","charAt","Math","floor","random","mobile","max","tablet","min","pc","monitor","Container","ColorPicker","borderBottom","width","height","fontSize","overflow","padding","border","CustomFormControlLabel","FormControlLabel","background","paddingRight","borderRadius","transition","NewNFT","_tokenData$name","showSpinner","hideSpinner","useSpinner","navigate","useNavigate","showAlert","useAlert","tokenContract","URLSearchParams","window","location","search","get","selector","account","accountId","setWalletSignin","useWalletSelector","connected","setConnected","useState","isMinting","setIsMinting","nftName","setNftName","nftPrice","setNftPrice","description","setDescription","setBackgroundColor","externalURL","setExternalURL","tokenId","setTokenId","tokenData","setTokenData","traits","setTraits","addedTraits","setAddedTraits","selectedImage","setSelectedImage","selectedDocument","setSelectedDocument","preview","setPreview","gotoView","handleColorChange","e","target","test","handleInputChange","startsWith","useEffect","isSignedIn","then","data","token","catch","err","parse","init","_jsxs","Grid","container","spacing","sx","item","xs","Skeleton","variant","md","sm","mt","Box","mb","position","IconButton","onClick","right","top","CloseIcon","Typography","name","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","id","AccordionDetails","Stack","gap","flexDirection","component","htmlFor","type","accept","display","onChange","event","files","selectedFiles","file","reader","FileReader","onloadend","readAsDataURL","borderColor","justifyContent","alignItems","bgcolor","cursor","src","alt","FileUploadOutlinedIcon","fontWeight","bottom","handleRemoveImage","DeleteOutlineIcon","TextField","label","placeholder","helperText","fullWidth","multiline","rows","direction","InsertDriveFileIcon","Button","handleRemoveDocument","preventDefault","stopPropagation","map","trait","index","category","FormGroup","p","values","control","Checkbox","handleTraitsChange","isCheck","checked","prevTraits","trait_type","filter","my","balance","getAccountBalance","available","metadata","title","media","animation_url","external_url","background_color","attributes","document","uploadResult","mediaPath","IPFS_URL","wallet","priceInYoctoNEAR","utils","toString","actionArg","token_id","reference","reference_hash","price","action","params","methodName","args","gas","deposit","signAndSendTransaction","actions","newNFT","contract","nftData","success","log"],"sourceRoot":""}